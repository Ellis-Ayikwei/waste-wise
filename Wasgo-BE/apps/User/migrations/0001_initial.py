# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postcode', models.CharField(max_length=20)),
                ('country', models.CharField(default='United Kingdom', max_length=100)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'verbose_name': 'User Address',
                'verbose_name_plural': 'User Addresses',
                'db_table': 'user_addresses',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('last_active', models.DateTimeField(null=True)),
                ('device_tokens', models.JSONField(default=list)),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('provider', 'Service Provider'), ('admin', 'Admin')], default='customer', max_length=20)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('suspended', 'Suspended'), ('deleted', 'Deleted'), ('banned', 'Banned'), ('expired', 'Expired')], default='active', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_addresses', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_address', to='User.address')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_address', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.UUIDField()),
                ('availability_type', models.CharField(choices=[('provider', 'Provider Availability'), ('driver', 'Driver Availability'), ('vehicle', 'Vehicle Availability')], max_length=20)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week (0=Monday, 6=Sunday)')),
                ('start_time', models.TimeField(help_text='Start time for this availability slot')),
                ('end_time', models.TimeField(help_text='End time for this availability slot')),
                ('is_available', models.BooleanField(default=True, help_text='Whether this slot is available')),
                ('is_recurring', models.BooleanField(default=True, help_text='Whether this is a recurring weekly slot')),
                ('specific_date', models.DateField(blank=True, help_text='Specific date for one-time availability (leave blank for recurring)', null=True)),
                ('max_jobs', models.PositiveIntegerField(default=1, help_text='Maximum number of jobs that can be scheduled in this slot')),
                ('current_bookings', models.PositiveIntegerField(default=0, help_text='Current number of bookings in this slot')),
                ('service_areas', models.JSONField(blank=True, default=list, help_text='List of service area IDs this availability applies to')),
                ('vehicle_types', models.JSONField(blank=True, default=list, help_text='List of vehicle types that can be used in this slot')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this availability')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Priority level for this availability slot', max_length=10)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Availability',
                'verbose_name_plural': 'Availability Slots',
                'db_table': 'availability',
                'ordering': ['day_of_week', 'start_time'],
                'indexes': [models.Index(fields=['availability_type'], name='availabilit_availab_3ac30e_idx'), models.Index(fields=['day_of_week'], name='availabilit_day_of__96ab6f_idx'), models.Index(fields=['is_available'], name='availabilit_is_avai_969be2_idx'), models.Index(fields=['specific_date'], name='availabilit_specifi_8f2580_idx'), models.Index(fields=['content_type', 'object_id'], name='availabilit_content_2b0734_idx')],
                'unique_together': {('content_type', 'object_id', 'day_of_week', 'start_time', 'specific_date')},
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_type', models.CharField(help_text='Type of activity performed', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'db_table': 'user_activities',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'activity_type'], name='user_activi_user_id_290628_idx'), models.Index(fields=['created_at'], name='user_activi_created_9fa3ca_idx')],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.UUIDField()),
                ('document_type', models.CharField(choices=[('driver_license', 'Driving License'), ('cpc', 'CPC Qualification Card'), ('tacho', 'Tachograph Card'), ('adr', 'ADR Certificate'), ('medical', 'Medical Certificate'), ('log_book', 'Log Book'), ('mot', 'MOT Certificate'), ('v5', 'V5 Document'), ('vehicle_insurance', 'Vehicle Insurance'), ('service_book', 'Service Book'), ('business_license', 'Business License'), ('waste_license', 'Waste Collection License'), ('environmental_permit', 'Environmental Permit'), ('insurance_certificate', 'Insurance Certificate'), ('vat_certificate', 'VAT Certificate'), ('id_document', 'ID Document'), ('employment_contract', 'Employment Contract'), ('training_certificate', 'Training Certificate'), ('other', 'Other Document')], max_length=30)),
                ('document_number', models.CharField(blank=True, help_text='Document reference number', max_length=100)),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Document description')),
                ('document_front', models.FileField(blank=True, help_text='Front side of document', null=True, upload_to='documents/%Y/%m/')),
                ('document_back', models.FileField(blank=True, help_text='Back side of document (if applicable)', null=True, upload_to='documents/%Y/%m/')),
                ('issue_date', models.DateField(blank=True, help_text='Document issue date', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Document expiry date', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether document has been verified')),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Notes from verification process')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable')),
                ('has_two_sides', models.BooleanField(default=False, help_text='Whether document has front and back sides')),
                ('is_required', models.BooleanField(default=True, help_text='Whether this document is required')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Document priority level', max_length=10)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'documents',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['document_type'], name='documents_documen_fc21d0_idx'), models.Index(fields=['status'], name='documents_status_f31a08_idx'), models.Index(fields=['expiry_date'], name='documents_expiry__8f271f_idx'), models.Index(fields=['content_type', 'object_id'], name='documents_content_7d700d_idx')],
                'unique_together': {('content_type', 'object_id', 'document_type')},
            },
        ),
    ]
