# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.contrib.gis.db.models.fields
import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CitizenReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_type', models.CharField(choices=[('overflow', 'Bin Overflow'), ('damage', 'Bin Damaged'), ('missing', 'Bin Missing'), ('blocked', 'Bin Blocked/Inaccessible'), ('fire', 'Fire Hazard'), ('smell', 'Bad Smell'), ('pests', 'Pests/Rodents'), ('illegal_dumping', 'Illegal Dumping'), ('service_request', 'Service ServiceRequest'), ('complaint', 'Complaint'), ('suggestion', 'Suggestion'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('reporter_name', models.CharField(blank=True, max_length=100)),
                ('reporter_phone', models.CharField(blank=True, max_length=20)),
                ('reporter_email', models.EmailField(blank=True, max_length=254)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('area', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('photo_url', models.URLField(blank=True, help_text='URL of uploaded photo')),
                ('additional_photos', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('acknowledged', 'Acknowledged'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('invalid', 'Invalid Report')], default='pending', max_length=20)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolution_action', models.CharField(blank=True, max_length=100)),
                ('requires_follow_up', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Citizen Report',
                'verbose_name_plural': 'Citizen Reports',
                'db_table': 'citizen_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request_id', models.CharField(help_text='Unique request identifier', max_length=50, unique=True)),
                ('service_type', models.CharField(choices=[('general', 'General Service'), ('waste_collection', 'Waste Collection'), ('recycling', 'Recycling Service'), ('hazardous_waste', 'Hazardous Waste Disposal'), ('moving', 'Moving Service'), ('delivery', 'Delivery Service'), ('maintenance', 'Maintenance Service'), ('bin_maintenance', 'Bin Maintenance'), ('route_optimization', 'Route Optimization'), ('waste_audit', 'Waste Audit'), ('environmental_consulting', 'Environmental Consulting')], max_length=30)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('pickup_location', django.contrib.gis.db.models.fields.PointField(help_text='GPS coordinates for pickup', srid=4326)),
                ('pickup_address', models.TextField()),
                ('dropoff_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='GPS coordinates for dropoff', null=True, srid=4326)),
                ('dropoff_address', models.TextField(blank=True)),
                ('landmark', models.CharField(blank=True, max_length=255)),
                ('current_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Current location during execution', null=True, srid=4326)),
                ('estimated_weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('actual_weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('estimated_volume_m3', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('actual_volume_m3', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('waste_type', models.CharField(blank=True, choices=[('general', 'General Waste'), ('recyclable', 'Recyclable'), ('organic', 'Organic/Compost'), ('hazardous', 'Hazardous Waste'), ('electronic', 'E-Waste'), ('plastic', 'Plastic Only'), ('paper', 'Paper & Cardboard'), ('glass', 'Glass'), ('metal', 'Metal'), ('construction', 'Construction Debris'), ('textile', 'Textile & Clothing')], help_text='Type of waste for collection requests', max_length=20)),
                ('requires_special_handling', models.BooleanField(default=False)),
                ('special_instructions', models.TextField(blank=True)),
                ('collection_method', models.CharField(blank=True, choices=[('manual', 'Manual Collection'), ('automated', 'Automated Lift'), ('side_loader', 'Side Loader'), ('rear_loader', 'Rear Loader'), ('front_loader', 'Front Loader')], help_text='Method used for waste collection', max_length=20)),
                ('service_date', models.DateField()),
                ('service_time_slot', models.CharField(blank=True, max_length=50)),
                ('scheduled_collection_time', models.TimeField(blank=True, null=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(blank=True, max_length=50)),
                ('offer_response', models.CharField(choices=[('pending', 'Pending Response'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', help_text="Provider's response to the offer", max_length=20)),
                ('offer_expires_at', models.DateTimeField(blank=True, help_text='When the offer expires', null=True)),
                ('offer_responded_at', models.DateTimeField(blank=True, null=True)),
                ('provider_notes', models.TextField(blank=True, help_text="Provider's notes about the service")),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('auto_assigned', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('offered', 'Offered to Provider'), ('accepted', 'Accepted by Provider'), ('assigned', 'Assigned'), ('en_route', 'Provider En Route'), ('arrived', 'Provider Arrived'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='draft', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('normal', 'Normal'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_instant', models.BooleanField(default=False, help_text='Whether this is an instant service')),
                ('matched_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('arrived_at', models.DateTimeField(blank=True, null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_completion_time', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('offered_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price offered by the provider', max_digits=10, null=True)),
                ('minimum_bid', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('platform_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('provider_payment_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash on Service'), ('mobile_money', 'Mobile Money'), ('card', 'Credit/Debit Card'), ('wallet', 'Platform Wallet'), ('invoice', 'Invoice (Corporate)')], default='cash', max_length=20)),
                ('is_paid', models.BooleanField(default=False)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('includes_equipment', models.BooleanField(default=False)),
                ('includes_materials', models.BooleanField(default=False)),
                ('includes_insurance', models.BooleanField(default=False)),
                ('special_conditions', models.TextField(blank=True)),
                ('distance_km', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('distance_to_provider_km', models.DecimalField(blank=True, decimal_places=2, help_text='Distance from provider to service location', max_digits=10, null=True)),
                ('estimated_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('actual_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('service_proof', models.JSONField(blank=True, default=list)),
                ('collection_photos', models.JSONField(blank=True, default=list)),
                ('collection_notes', models.TextField(blank=True)),
                ('collection_verified', models.BooleanField(default=False)),
                ('verification_photos', models.JSONField(blank=True, default=list)),
                ('co2_emissions_kg', models.DecimalField(blank=True, decimal_places=2, help_text='CO2 emissions in kg for this service', max_digits=8, null=True)),
                ('recycling_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of waste recycled', max_digits=5, null=True)),
                ('environmental_impact_score', models.DecimalField(blank=True, decimal_places=2, help_text='Environmental impact score (0-100)', max_digits=5, null=True)),
                ('preferred_vehicle_types', models.JSONField(blank=True, null=True)),
                ('required_qualifications', models.JSONField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('tracking_url', models.URLField(blank=True)),
            ],
            options={
                'verbose_name': 'Service ServiceRequest',
                'verbose_name_plural': 'Service Requests',
                'db_table': 'service_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestTimelineEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('created', 'Service ServiceRequest Created'), ('offer_sent', 'Offer Sent'), ('offer_accepted', 'Offer Accepted'), ('offer_rejected', 'Offer Rejected'), ('assigned', 'Provider Assigned'), ('started', 'Service Started'), ('completed', 'Service Completed'), ('cancelled', 'Service Cancelled'), ('system_notification', 'System Notification')], max_length=30)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('provider', 'Provider Only'), ('customer', 'Customer Only'), ('system', 'System Only')], default='public', max_length=20)),
            ],
            options={
                'db_table': 'service_request_timeline_events',
                'ordering': ['-timestamp'],
            },
        ),
    ]
