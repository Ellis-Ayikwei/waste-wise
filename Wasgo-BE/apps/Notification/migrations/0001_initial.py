# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.CharField(choices=[('booking_created', 'Booking Created'), ('booking_confirmed', 'Booking Confirmed'), ('booking_cancelled', 'Booking Cancelled'), ('request_update', 'ServiceRequest Status Update'), ('provider_accepted', 'Provider Accepted ServiceRequest'), ('provider_assigned', 'Provider Assigned'), ('job_started', 'ServiceRequest Started'), ('job_in_transit', 'ServiceRequest In Transit'), ('job_completed', 'ServiceRequest Completed'), ('job_cancelled', 'ServiceRequest Cancelled'), ('account_verified', 'Account Verified'), ('provider_verified', 'Provider Account Verified'), ('account_suspended', 'Account Suspended'), ('account_reactivated', 'Account Reactivated'), ('payment_pending', 'Payment Pending'), ('payment_confirmed', 'Payment Confirmed'), ('payment_failed', 'Payment Failed'), ('payment_refunded', 'Payment Refunded'), ('deposit_received', 'Deposit Received'), ('bid_received', 'New Bid Received'), ('bid_accepted', 'Bid Accepted'), ('bid_rejected', 'Bid Rejected'), ('bid_counter_offer', 'Counter Offer Made'), ('message_received', 'New Message'), ('support_ticket_created', 'Support Ticket Created'), ('support_ticket_updated', 'Support Ticket Updated'), ('review_received', 'New Review Received'), ('rating_reminder', 'Rating Reminder'), ('system_maintenance', 'System Maintenance'), ('policy_update', 'Policy Update'), ('feature_announcement', 'New Feature'), ('account_warning', 'Account Warning'), ('system_test', 'System Test'), ('waste_collection_scheduled', 'Waste Collection Scheduled'), ('waste_collection_en_route', 'Waste Collection En Route'), ('waste_collection_arrived', 'Waste Collection Arrived'), ('waste_collection_completed', 'Waste Collection Completed'), ('waste_collection_cancelled', 'Waste Collection Cancelled'), ('bin_full_alert', 'Bin Full Alert'), ('bin_overflow_alert', 'Bin Overflow Alert'), ('bin_maintenance_required', 'Bin Maintenance Required'), ('bin_offline_alert', 'Bin Offline Alert'), ('collection_route_optimized', 'Collection Route Optimized'), ('waste_audit_completed', 'Waste Audit Completed'), ('recycling_rate_update', 'Recycling Rate Update'), ('environmental_impact_report', 'Environmental Impact Report'), ('hazardous_waste_alert', 'Hazardous Waste Alert'), ('citizen_report_received', 'Citizen Report Received'), ('citizen_report_resolved', 'Citizen Report Resolved'), ('provider_earnings_update', 'Provider Earnings Update'), ('waste_license_expiry_warning', 'Waste License Expiry Warning'), ('environmental_permit_expiry_warning', 'Environmental Permit Expiry Warning'), ('collection_efficiency_report', 'Collection Efficiency Report'), ('route_optimization_suggestion', 'Route Optimization Suggestion'), ('waste_volume_forecast', 'Waste Volume Forecast'), ('emergency_collection_request', 'Emergency Collection ServiceRequest'), ('scheduled_maintenance_reminder', 'Scheduled Maintenance Reminder'), ('bin_sensor_alert', 'Bin Sensor Alert'), ('collection_delay_notification', 'Collection Delay Notification'), ('waste_type_mismatch_alert', 'Waste Type Mismatch Alert'), ('collection_verification_required', 'Collection Verification Required'), ('environmental_compliance_alert', 'Environmental Compliance Alert'), ('payment', 'Payment Notification'), ('bid', 'Bid Notification'), ('message', 'New Message'), ('system', 'System Notification')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('data', models.JSONField(blank=True, null=True)),
                ('read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', max_length=10)),
                ('delivery_channels', models.JSONField(default=list, help_text='List of channels to deliver notification')),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='Schedule notification for later', null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('sms_sent', models.BooleanField(default=False)),
                ('push_sent', models.BooleanField(default=False)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('related_object_id', models.CharField(blank=True, max_length=100, null=True)),
                ('action_url', models.URLField(blank=True, help_text='URL for action button', max_length=500, null=True)),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=100, null=True)),
                ('waste_type', models.CharField(blank=True, help_text='Type of waste for waste-related notifications', max_length=20)),
                ('bin_id', models.CharField(blank=True, help_text='Bin ID for bin-related notifications', max_length=50)),
                ('collection_date', models.DateField(blank=True, help_text='Collection date for collection-related notifications', null=True)),
                ('location_coordinates', models.JSONField(blank=True, help_text='GPS coordinates for location-based notifications', null=True)),
                ('environmental_impact', models.JSONField(blank=True, help_text='Environmental impact data for waste notifications', null=True)),
                ('urgency_level', models.CharField(choices=[('routine', 'Routine'), ('scheduled', 'Scheduled'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='routine', help_text='Urgency level for waste management notifications', max_length=20)),
                ('thread_id', models.CharField(blank=True, help_text='Thread ID for grouping related notifications', max_length=100, null=True)),
                ('delivery_attempts', models.IntegerField(default=0)),
                ('last_delivery_attempt', models.DateTimeField(blank=True, null=True)),
                ('delivery_error', models.TextField(blank=True, help_text='Error message if delivery failed')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When notification expires and can be cleaned up', null=True)),
                ('auto_delete', models.BooleanField(default=True, help_text='Whether notification should be auto-deleted after expiration')),
                ('parent_notification', models.ForeignKey(blank=True, help_text='Parent notification for threaded notifications', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_notifications', to='Notification.notification')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notification',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
    ]
