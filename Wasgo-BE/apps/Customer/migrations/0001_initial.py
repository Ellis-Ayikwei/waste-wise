# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='Ghana', max_length=100)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('is_default', models.BooleanField(default=False)),
                ('address_type', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('industrial', 'Industrial')], default='residential', max_length=20)),
                ('access_notes', models.TextField(blank=True, help_text='Special access instructions for drivers')),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyPointsLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points_added', models.IntegerField(help_text='Points added (can be negative)')),
                ('reason', models.CharField(help_text='Reason for points change', max_length=255)),
                ('total_points', models.PositiveIntegerField(help_text='Total points after change')),
            ],
            options={
                'db_table': 'loyalty_points_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(blank=True, help_text='Primary contact number', max_length=20)),
                ('emergency_contact', models.CharField(blank=True, help_text='Emergency contact number', max_length=20)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('preferred_collection_days', models.JSONField(default=list, help_text="Preferred days for waste collection (e.g., ['monday', 'wednesday'])")),
                ('preferred_collection_time', models.CharField(choices=[('morning', 'Morning (6AM-12PM)'), ('afternoon', 'Afternoon (12PM-6PM)'), ('evening', 'Evening (6PM-10PM)')], default='morning', help_text='Preferred time slot for collection', max_length=20)),
                ('waste_types', models.JSONField(default=list, help_text="Types of waste generated (e.g., ['general', 'recyclable', 'organic'])")),
                ('estimated_weekly_waste_kg', models.FloatField(default=10.0, help_text='Estimated weekly waste generation in kilograms', validators=[django.core.validators.MinValueValidator(0)])),
                ('requires_special_handling', models.BooleanField(default=False, help_text='Requires special handling (hazardous waste, large items, etc.)')),
                ('special_handling_notes', models.TextField(blank=True)),
                ('billing_cycle', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly')], default='monthly', max_length=20)),
                ('auto_payment_enabled', models.BooleanField(default=False)),
                ('payment_method', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer'), ('mobile_money', 'Mobile Money'), ('cash', 'Cash')], default='card', max_length=20)),
                ('loyalty_points', models.PositiveIntegerField(default=0)),
                ('referral_code', models.CharField(blank=True, max_length=20, unique=True)),
                ('total_waste_collected_kg', models.FloatField(default=0.0, help_text='Total waste collected from this customer', validators=[django.core.validators.MinValueValidator(0)])),
                ('communication_preferences', models.JSONField(blank=True, default=dict, help_text='Notification preferences (email, sms, push, etc.)')),
                ('marketing_opt_in', models.BooleanField(default=False, verbose_name='Marketing Communications')),
                ('is_active', models.BooleanField(default=True)),
                ('service_suspended_until', models.DateTimeField(blank=True, null=True)),
                ('suspension_reason', models.TextField(blank=True)),
                ('default_address', models.ForeignKey(blank=True, help_text='Default address for waste collection', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_default_address', to='Customer.address')),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
                'db_table': 'customer_profile',
            },
        ),
    ]
