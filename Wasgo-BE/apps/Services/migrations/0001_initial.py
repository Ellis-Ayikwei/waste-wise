# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Provider', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(max_length=30, null=True)),
                ('color', models.CharField(blank=True, help_text='CSS color classes', max_length=50)),
                ('tab_color', models.CharField(blank=True, help_text='CSS color classes for tabs', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('category_type', models.CharField(choices=[('general', 'General Services'), ('waste_management', 'Waste Management'), ('logistics', 'Logistics & Transport'), ('maintenance', 'Maintenance & Repair'), ('consulting', 'Consulting Services')], default='general', help_text='Type of service category', max_length=20)),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'db_table': 'service_category',
                'managed': True,
                'indexes': [models.Index(fields=['category_type'], name='service_cat_categor_1e9313_idx'), models.Index(fields=['is_active'], name='service_cat_is_acti_fa7ae3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(max_length=30, null=True)),
                ('color', models.CharField(blank=True, help_text='CSS color classes', max_length=50)),
                ('estimated_duration', models.PositiveIntegerField(blank=True, help_text='Estimated duration in hours', null=True)),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Base price for the service', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('service_type', models.CharField(choices=[('general', 'General Service'), ('waste_collection', 'Waste Collection'), ('recycling', 'Recycling Service'), ('hazardous_waste', 'Hazardous Waste Disposal'), ('bin_maintenance', 'Bin Maintenance'), ('route_optimization', 'Route Optimization'), ('waste_audit', 'Waste Audit'), ('environmental_consulting', 'Environmental Consulting'), ('moving', 'Moving Service'), ('delivery', 'Delivery Service'), ('maintenance', 'Maintenance Service')], default='general', help_text='Specific type of service', max_length=30)),
                ('waste_types_handled', models.JSONField(blank=True, default=list, help_text='Types of waste this service can handle')),
                ('requires_special_license', models.BooleanField(default=False, help_text='Whether this service requires special licensing')),
                ('environmental_impact', models.JSONField(blank=True, help_text='Environmental impact data for this service', null=True)),
                ('minimum_notice_hours', models.IntegerField(default=24, help_text='Minimum notice required in hours')),
                ('max_distance_km', models.IntegerField(blank=True, help_text='Maximum service distance in km', null=True)),
                ('requires_vehicle', models.BooleanField(default=True, help_text='Whether this service requires a vehicle')),
                ('requires_equipment', models.BooleanField(default=False, help_text='Whether this service requires special equipment')),
                ('available_24_7', models.BooleanField(default=False, help_text='Whether service is available 24/7')),
                ('weekend_available', models.BooleanField(default=True, help_text='Whether service is available on weekends')),
                ('emergency_available', models.BooleanField(default=False, help_text='Whether emergency service is available')),
                ('providers', models.ManyToManyField(through='Provider.ServiceProviderThrough', to='Provider.serviceprovider')),
                ('service_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='Services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'db_table': 'services',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WasteManagementService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('waste_types_accepted', models.JSONField(default=list, help_text='Types of waste this service accepts')),
                ('waste_types_rejected', models.JSONField(default=list, help_text='Types of waste this service does not accept')),
                ('collection_methods', models.JSONField(default=list, help_text='Available collection methods')),
                ('daily_capacity_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Daily collection capacity in kg', max_digits=10, null=True)),
                ('vehicle_capacity_m3', models.DecimalField(blank=True, decimal_places=2, help_text='Vehicle capacity in cubic meters', max_digits=8, null=True)),
                ('environmental_permits', models.JSONField(default=list, help_text='Environmental permits held')),
                ('compliance_certifications', models.JSONField(default=list, help_text='Compliance certifications')),
                ('has_sorting_facility', models.BooleanField(default=False)),
                ('has_compaction_equipment', models.BooleanField(default=False)),
                ('has_recycling_facility', models.BooleanField(default=False)),
                ('has_hazardous_waste_handling', models.BooleanField(default=False)),
                ('service_radius_km', models.IntegerField(default=10, help_text='Service radius in kilometers')),
                ('coverage_areas', models.JSONField(default=list, help_text='Specific areas covered by this service')),
                ('pricing_model', models.CharField(choices=[('per_kg', 'Per Kilogram'), ('per_volume', 'Per Volume'), ('per_collection', 'Per Collection'), ('subscription', 'Subscription'), ('custom', 'Custom Pricing')], default='per_kg', max_length=20)),
                ('base_rate_per_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('base_rate_per_m3', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('minimum_charge', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('collection_frequency_options', models.JSONField(default=list, help_text='Available collection frequency options')),
                ('advance_booking_required_hours', models.IntegerField(default=24, help_text='Hours of advance notice required')),
                ('average_response_time_minutes', models.IntegerField(blank=True, help_text='Average response time in minutes', null=True)),
                ('customer_satisfaction_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='waste_management_details', to='Services.services')),
            ],
            options={
                'verbose_name': 'Waste Management Service',
                'verbose_name_plural': 'Waste Management Services',
                'db_table': 'waste_management_services',
            },
        ),
        migrations.AddIndex(
            model_name='services',
            index=models.Index(fields=['service_type'], name='services_service_df1ac4_idx'),
        ),
        migrations.AddIndex(
            model_name='services',
            index=models.Index(fields=['is_active'], name='services_is_acti_b1f5d3_idx'),
        ),
        migrations.AddIndex(
            model_name='services',
            index=models.Index(fields=['requires_special_license'], name='services_require_0bea34_idx'),
        ),
        migrations.AddIndex(
            model_name='services',
            index=models.Index(fields=['available_24_7'], name='services_availab_3c8095_idx'),
        ),
        migrations.AddIndex(
            model_name='services',
            index=models.Index(fields=['emergency_available'], name='services_emergen_5bc5cd_idx'),
        ),
    ]
