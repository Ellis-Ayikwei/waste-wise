# Generated by Django 5.2.5 on 2025-08-24 12:32

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BinType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('general', 'General Waste'), ('recyclable', 'Recyclable'), ('organic', 'Organic/Compost'), ('hazardous', 'Hazardous'), ('electronic', 'E-Waste'), ('plastic', 'Plastic Only'), ('paper', 'Paper Only'), ('glass', 'Glass Only'), ('metal', 'Metal Only')], max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(help_text='Hex color code for UI display', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Icon name for UI', max_length=50)),
                ('capacity_liters', models.IntegerField(default=240, help_text='Standard capacity in liters')),
            ],
            options={
                'verbose_name': 'Bin Type',
                'verbose_name_plural': 'Bin Types',
                'db_table': 'bin_types',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sensor_number', models.CharField(help_text='Sensor number (e.g., SENSOR-00001)', max_length=100, unique=True)),
                ('sensor_type', models.CharField(choices=[('fill_level', 'Fill Level Sensor'), ('weight', 'Weight Sensor'), ('temperature', 'Temperature Sensor'), ('humidity', 'Humidity Sensor'), ('motion', 'Motion Sensor'), ('lid', 'Lid Sensor'), ('battery', 'Battery Monitor'), ('gps', 'GPS Tracker'), ('compactor', 'Compactor Sensor'), ('odor', 'Odor Sensor'), ('fire', 'Fire/Smoke Sensor'), ('vibration', 'Vibration Sensor'), ('light', 'Light Sensor'), ('sound', 'Sound Level Sensor'), ('multi', 'Multi-Sensor Unit')], default='multi', max_length=20)),
                ('category', models.CharField(choices=[('environmental', 'Environmental'), ('mechanical', 'Mechanical'), ('safety', 'Safety'), ('operational', 'Operational'), ('monitoring', 'Monitoring')], default='monitoring', max_length=20)),
                ('model', models.CharField(help_text='Sensor model/manufacturer', max_length=100)),
                ('manufacturer', models.CharField(blank=True, help_text='Sensor manufacturer', max_length=100)),
                ('serial_number', models.CharField(help_text='Hardware serial number', max_length=100, unique=True)),
                ('version', models.CharField(blank=True, help_text='Hardware version', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('faulty', 'Faulty'), ('offline', 'Offline'), ('calibrating', 'Calibrating'), ('testing', 'Testing')], default='active', max_length=20)),
                ('battery_level', models.IntegerField(default=100, help_text='Sensor battery level percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('signal_strength', models.IntegerField(default=100, help_text='Network signal strength percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('accuracy', models.FloatField(blank=True, help_text='Sensor accuracy percentage', null=True)),
                ('precision', models.FloatField(blank=True, help_text='Sensor precision value', null=True)),
                ('range_min', models.FloatField(blank=True, help_text='Minimum measurement range', null=True)),
                ('range_max', models.FloatField(blank=True, help_text='Maximum measurement range', null=True)),
                ('unit', models.CharField(blank=True, help_text='Measurement unit (%, kg, °C, etc.)', max_length=20)),
                ('installation_date', models.DateField()),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('warranty_expiry', models.DateField(blank=True, null=True)),
                ('expected_lifespan_years', models.IntegerField(blank=True, help_text='Expected lifespan in years', null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('software_version', models.CharField(blank=True, max_length=50)),
                ('calibration_date', models.DateField(blank=True, null=True)),
                ('calibration_due_date', models.DateField(blank=True, null=True)),
                ('calibration_interval_days', models.IntegerField(blank=True, help_text='Days between calibrations', null=True)),
                ('communication_protocol', models.CharField(blank=True, help_text='Protocol (WiFi, Bluetooth, LoRa, etc.)', max_length=50)),
                ('data_transmission_interval', models.IntegerField(blank=True, help_text='Data transmission interval in seconds', null=True)),
                ('last_data_transmission', models.DateTimeField(blank=True, help_text='Last successful data transmission', null=True)),
                ('operating_temperature_min', models.FloatField(blank=True, help_text='Minimum operating temperature (°C)', null=True)),
                ('operating_temperature_max', models.FloatField(blank=True, help_text='Maximum operating temperature (°C)', null=True)),
                ('operating_humidity_min', models.FloatField(blank=True, help_text='Minimum operating humidity (%)', null=True)),
                ('operating_humidity_max', models.FloatField(blank=True, help_text='Maximum operating humidity (%)', null=True)),
                ('power_consumption_watts', models.FloatField(blank=True, help_text='Power consumption in watts', null=True)),
                ('battery_capacity_mah', models.IntegerField(blank=True, help_text='Battery capacity in mAh', null=True)),
                ('solar_powered', models.BooleanField(default=False, help_text='Whether sensor is solar powered')),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether sensor data is publicly accessible')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization')),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensors',
                'db_table': 'sensors',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['sensor_number'], name='sensors_sensor__3806de_idx'), models.Index(fields=['serial_number'], name='sensors_serial__2b4a8a_idx'), models.Index(fields=['status'], name='sensors_status_8bf6e7_idx'), models.Index(fields=['sensor_type'], name='sensors_sensor__b33258_idx'), models.Index(fields=['category'], name='sensors_categor_81ea59_idx'), models.Index(fields=['battery_level'], name='sensors_battery_709bf0_idx'), models.Index(fields=['signal_strength'], name='sensors_signal__22d23a_idx')],
            },
        ),
        migrations.CreateModel(
            name='SmartBin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bin_number', models.CharField(help_text='Unique identifier for the bin (e.g., BIN001)', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Descriptive name or location identifier', max_length=100)),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='GPS coordinates of the bin', srid=4326)),
                ('address', models.CharField(max_length=255)),
                ('area', models.CharField(help_text='Neighborhood or district', max_length=100)),
                ('city', models.CharField(default='Accra', max_length=100)),
                ('region', models.CharField(default='Greater Accra', max_length=100)),
                ('landmark', models.CharField(blank=True, help_text='Nearby landmark for easy identification', max_length=255)),
                ('fill_level', models.IntegerField(default=0, help_text='Current fill level percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fill_status', models.CharField(choices=[('empty', 'Empty (0-20%)'), ('low', 'Low (20-40%)'), ('medium', 'Medium (40-60%)'), ('high', 'High (60-80%)'), ('full', 'Full (80-100%)'), ('overflow', 'Overflow (>100%)')], default='empty', max_length=20)),
                ('temperature', models.FloatField(blank=True, help_text='Internal temperature in Celsius', null=True)),
                ('humidity', models.FloatField(blank=True, help_text='Internal humidity percentage', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('damaged', 'Damaged'), ('full', 'Full - Needs Collection'), ('offline', 'Offline - No Signal')], default='active', max_length=20)),
                ('capacity_kg', models.FloatField(default=100, help_text='Maximum capacity in kilograms')),
                ('current_weight_kg', models.FloatField(default=0, help_text='Current waste weight in kilograms')),
                ('last_reading_at', models.DateTimeField(blank=True, help_text='Last sensor reading timestamp', null=True)),
                ('last_collection_at', models.DateTimeField(blank=True, help_text='Last waste collection timestamp', null=True)),
                ('installation_date', models.DateField()),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('maintenance_notes', models.TextField(blank=True)),
                ('has_compactor', models.BooleanField(default=False, help_text='Whether bin has waste compactor')),
                ('has_solar_panel', models.BooleanField(default=False, help_text='Whether bin has solar power')),
                ('has_foot_pedal', models.BooleanField(default=False, help_text='Whether bin has foot pedal for hands-free opening')),
                ('qr_code', models.CharField(blank=True, help_text='QR code for citizen reporting', max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether bin is publicly accessible')),
                ('is_online', models.BooleanField(default=True)),
                ('bin_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bins', to='WasteBin.bintype')),
                ('sensor', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_bin', to='WasteBin.sensor')),
                ('user', models.ForeignKey(blank=True, help_text='User who owns this bin (can be null for public bins)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_bins', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Smart Bin',
                'verbose_name_plural': 'Smart Bins',
                'db_table': 'smart_bins',
                'ordering': ['-fill_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('fill_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('weight_kg', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('battery_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('signal_strength', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('motion_detected', models.BooleanField(default=False, help_text='Motion sensor triggered')),
                ('lid_open', models.BooleanField(default=False, help_text='Whether lid is currently open')),
                ('error_code', models.CharField(blank=True, help_text='Error code if any', max_length=50)),
                ('raw_data', models.JSONField(blank=True, help_text='Raw sensor data for debugging', null=True)),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='WasteBin.sensor')),
                ('bin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='WasteBin.smartbin')),
            ],
            options={
                'verbose_name': 'Sensor Reading',
                'verbose_name_plural': 'Sensor Readings',
                'db_table': 'sensor_readings',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BinAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alert_type', models.CharField(choices=[('full', 'Bin Full'), ('overflow', 'Bin Overflow'), ('low_battery', 'Low Battery'), ('offline', 'Sensor Offline'), ('maintenance', 'Maintenance Required'), ('damage', 'Damage Reported'), ('fire', 'Fire/Smoke Detected'), ('vandalism', 'Vandalism Detected'), ('stuck_lid', 'Lid Stuck')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('message', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('notification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('sensor', models.ForeignKey(blank=True, help_text='Sensor that triggered this alert (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='WasteBin.sensor')),
                ('bin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='WasteBin.smartbin')),
            ],
            options={
                'verbose_name': 'Bin Alert',
                'verbose_name_plural': 'Bin Alerts',
                'db_table': 'bin_alerts',
                'ordering': ['-created_at', '-priority'],
            },
        ),
        migrations.AddIndex(
            model_name='smartbin',
            index=models.Index(fields=['bin_number'], name='smart_bins_bin_num_3f7a58_idx'),
        ),
        migrations.AddIndex(
            model_name='smartbin',
            index=models.Index(fields=['fill_level'], name='smart_bins_fill_le_819be1_idx'),
        ),
        migrations.AddIndex(
            model_name='smartbin',
            index=models.Index(fields=['status'], name='smart_bins_status_efdcbe_idx'),
        ),
        migrations.AddIndex(
            model_name='smartbin',
            index=models.Index(fields=['area'], name='smart_bins_area_de3de2_idx'),
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['bin', '-timestamp'], name='sensor_read_bin_id_b4d814_idx'),
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['timestamp'], name='sensor_read_timesta_56e803_idx'),
        ),
    ]
