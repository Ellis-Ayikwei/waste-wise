# Generated by Django 5.2.4 on 2025-08-04 23:18

import django.db.models.deletion
import django_fsm
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Driver', '0002_initial'),
        ('Location', '0001_initial'),
        ('Provider', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MoveMilestone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('milestone_type', models.CharField(choices=[('preparation', 'Preparation'), ('loading', 'Loading'), ('in_transit', 'In Transit'), ('unloading', 'Unloading'), ('setup', 'Setup'), ('completion', 'Completion')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('delayed', 'Delayed')], default='pending', max_length=20)),
                ('estimated_duration', models.DurationField(help_text='Estimated time to complete this milestone')),
                ('actual_duration', models.DurationField(blank=True, help_text='Actual time taken to complete', null=True)),
                ('scheduled_start', models.DateTimeField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('delay_reason', models.TextField(blank=True, help_text='Reason for any delays')),
                ('sequence', models.IntegerField(default=0, help_text='Order of milestones in the move process')),
            ],
            options={
                'verbose_name': 'Move Milestone',
                'verbose_name_plural': 'Move Milestones',
                'db_table': 'move_milestone',
                'ordering': ['sequence'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DropoffSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Location.location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PickupSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Location.location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request_type', models.CharField(choices=[('biddable', 'Biddable'), ('instant', 'Instant'), ('journey', 'Journey')], max_length=10)),
                ('status', django_fsm.FSMField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('bidding', 'Bidding in Progress'), ('accepted', 'Accepted'), ('assigned', 'Assigned'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=50)),
                ('priority', models.CharField(choices=[('standard', 'Standard'), ('express', 'Express'), ('same_day', 'Same Day'), ('scheduled', 'Scheduled')], default='standard', help_text='Priority level of the request', max_length=20)),
                ('service_level', models.CharField(choices=[('standard', 'Standard (2-3 business days)'), ('express', 'Express (1-2 business days)'), ('same_day', 'Same Day Delivery'), ('scheduled', 'Scheduled (Flexible Date)')], default='standard', max_length=20)),
                ('service_type', models.CharField(blank=True, help_text='Type of service requested', max_length=50)),
                ('contact_name', models.CharField(blank=True, default='', max_length=255)),
                ('contact_email', models.EmailField(blank=True, default='', max_length=254)),
                ('contact_phone', models.CharField(blank=True, default='', max_length=20)),
                ('booking_code', models.CharField(blank=True, max_length=20)),
                ('preferred_pickup_date', models.DateField(blank=True, null=True)),
                ('preferred_pickup_time', models.CharField(blank=True, choices=[('morning', 'Morning (8AM - 12PM)'), ('afternoon', 'Afternoon (12PM - 4PM)'), ('evening', 'Evening (4PM - 8PM)'), ('flexible', 'Flexible (Any time)')], max_length=10, null=True)),
                ('preferred_pickup_time_window', models.JSONField(blank=True, null=True)),
                ('preferred_delivery_date', models.DateField(blank=True, null=True)),
                ('preferred_delivery_time', models.CharField(blank=True, choices=[('morning', 'Morning (8AM - 12PM)'), ('afternoon', 'Afternoon (12PM - 4PM)'), ('evening', 'Evening (4PM - 8PM)'), ('flexible', 'Flexible (Any time)')], max_length=10, null=True)),
                ('is_flexible', models.BooleanField(default=False, help_text='Whether schedule is flexible')),
                ('items_description', models.TextField(blank=True)),
                ('total_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, null=True)),
                ('requires_special_handling', models.BooleanField(default=False)),
                ('special_instructions', models.TextField(blank=True)),
                ('staff_required', models.IntegerField(blank=True, default=1, null=True)),
                ('moving_items', models.JSONField(blank=True, help_text='JSON array of moving items', null=True)),
                ('photo_urls', models.JSONField(blank=True, help_text='List of photo URLs', null=True)),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_factors', models.JSONField(blank=True, null=True)),
                ('tracking_number', models.CharField(blank=True, max_length=60, null=True, unique=True)),
                ('insurance_required', models.BooleanField(default=False)),
                ('insurance_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('cancellation_time', models.DateTimeField(blank=True, null=True)),
                ('cancellation_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('route_optimization_data', models.JSONField(blank=True, null=True)),
                ('weather_conditions', models.JSONField(blank=True, null=True)),
                ('carbon_footprint', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('estimated_fuel_consumption', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('estimated_completion_time', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('estimated_distance', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('route_waypoints', models.JSONField(blank=True, null=True)),
                ('loading_time', models.DurationField(blank=True, null=True)),
                ('unloading_time', models.DurationField(blank=True, null=True)),
                ('price_breakdown', models.JSONField(blank=True, null=True)),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Driver.driver')),
                ('dropoff_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dropoff_requests_direct', to='Location.location')),
                ('dropoff_locations', models.ManyToManyField(related_name='dropoff_requests', to='Location.location')),
                ('pickup_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pickup_requests_direct', to='Location.location')),
                ('pickup_locations', models.ManyToManyField(related_name='pickup_requests', to='Location.location')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Provider.serviceprovider')),
            ],
            options={
                'verbose_name': 'Request',
                'verbose_name_plural': 'Requests',
                'db_table': 'request',
                'managed': True,
            },
        ),
    ]
