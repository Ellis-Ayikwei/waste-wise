# Generated by Django 5.2.4 on 2025-08-04 23:18

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('CommonItems', '0001_initial'),
        ('Driver', '0001_initial'),
        ('Provider', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registration', models.CharField(help_text='UK Vehicle Registration Number (e.g., AB12 CDE, WK20 ABC, YK23 XYZ)', max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9 ]{1,10}$', 'Valid UK vehicle registration required')])),
                ('make', models.CharField(help_text='Vehicle manufacturer', max_length=50)),
                ('model', models.CharField(help_text='Vehicle model', max_length=50)),
                ('year', models.PositiveIntegerField(help_text='Year of manufacture', validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('seats', models.IntegerField(default=2)),
                ('fuel_type', models.CharField(choices=[('diesel', 'Diesel'), ('petrol', 'Petrol'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('plugin_hybrid', 'Plug-in Hybrid'), ('hydrogen', 'Hydrogen'), ('lpg', 'LPG'), ('cng', 'CNG')], max_length=15)),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=10)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('payload_capacity_kg', models.PositiveIntegerField(help_text='Maximum payload in kg')),
                ('gross_vehicle_weight_kg', models.PositiveIntegerField(help_text='Gross vehicle weight in kg (GVW)')),
                ('max_length_m', models.IntegerField(blank=True, null=True)),
                ('load_volume_m3', models.DecimalField(decimal_places=2, help_text='Load volume in cubic meters', max_digits=5)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=50)),
                ('insurance_expiry_date', models.DateField(blank=True, null=True)),
                ('has_tail_lift', models.BooleanField(default=False)),
                ('has_tracking_device', models.BooleanField(default=False)),
                ('has_dash_cam', models.BooleanField(default=False)),
                ('additional_features', models.JSONField(blank=True, help_text='Additional vehicle features', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Vehicle is currently active in the fleet')),
                ('location', models.JSONField(blank=True, help_text='Last known location', null=True)),
                ('last_location_update', models.DateTimeField(blank=True, null=True)),
                ('primary_location', models.JSONField(blank=True, help_text='Primary location where this vehicle is based', null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Vehicle is available for jobs')),
                ('primary_driver', models.ForeignKey(blank=True, help_text='Driver primarily assigned to this vehicle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_vehicles', to='Driver.driver')),
                ('provider', models.ForeignKey(help_text='Service provider that owns this vehicle', on_delete=django.db.models.deletion.CASCADE, related_name='provider_vehicles', to='Provider.serviceprovider')),
                ('vehicle_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='CommonItems.vehiclecategory')),
                ('vehicle_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='CommonItems.vehicletype')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicle',
                'ordering': ['provider', 'registration'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VehicleDocuments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('log_book', 'Log Book'), ('mot', 'MOT Certificate'), ('v5', 'V5 Document'), ('insurance', 'Insurance Certificate'), ('service_book', 'Service Book'), ('other', 'Other Document')], max_length=20)),
                ('document', models.FileField(upload_to='vehicle_documents/%Y/%m/')),
                ('description', models.TextField(blank=True, help_text='Optional description of the document')),
                ('expiry_date', models.DateField(blank=True, help_text='Document expiry date if applicable', null=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='Vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Document',
                'verbose_name_plural': 'Vehicle Documents',
                'db_table': 'vehicle_documents',
                'ordering': ['vehicle', 'document_type', '-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VehicleImages',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to='vehicle_photos/%Y/%m/')),
                ('description', models.TextField(blank=True, help_text='Optional description of the photo')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order (1-5)')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='Vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Photo',
                'verbose_name_plural': 'Vehicle Photos',
                'db_table': 'vehicle_images',
                'ordering': ['vehicle', 'order', '-created_at'],
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['registration'], name='vehicle_registr_a8749d_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['provider'], name='vehicle_provide_4904c7_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['vehicle_type'], name='vehicle_vehicle_24f066_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['is_active', 'is_available'], name='vehicle_is_acti_004929_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehicledocuments',
            unique_together={('vehicle', 'document_type')},
        ),
    ]
