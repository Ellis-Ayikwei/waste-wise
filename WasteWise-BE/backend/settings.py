"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / ".env")

# Debug environment loading


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("DJANGO_SECRET_KEY environment variable is required")
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY", "")
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "channels",
    # Django OTP
    # Apps
    "apps.Message",
    "apps.Authentication",
    # "apps.backend",
    "apps.Notification",
    "apps.Payment",
    "apps.Provider",
    "apps.Request",
    "apps.User",
    "apps.Vehicle",
    "apps.Driver",
    "apps.Tracking",
    "apps.Location",
    "apps.Bidding",
    "apps.Review",
    "apps.Services",
    "apps.Contract",
    "apps.Basemodel",
    "utils",
    "apps.Job",
    "apps.pricing",
    "apps.CommonItems",
    "apps.RequestItems",
    "apps.JourneyStop",
    "apps.Chat",
    "apps.WasteBin",  # WasteWise IoT bin management
    "apps.WasteProvider",  # Uber for Waste provider system
]

MIDDLEWARE = [
    # 'backend.middle_ware.ConditionalSlashMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "wastewise",  # database name
        "USER": "postgres",  # database user
        "PASSWORD": "@Toshib123",  # database password
        "HOST": "localhost",  # database host
        "PORT": "5432",  # database port
    }
}

import os
import platform
from ctypes import CDLL
import ctypes.util

if os.name == "nt":
    # Windows configuration
    OSGEO4W = r"C:\OSGeo4W"
    assert os.path.isdir(OSGEO4W), "Directory does not exist: " + OSGEO4W

    os.environ["OSGEO4W_ROOT"] = OSGEO4W
    os.environ["GDAL_DATA"] = os.path.join(OSGEO4W, "share", "gdal")
    os.environ["PROJ_LIB"] = os.path.join(OSGEO4W, "share", "proj")
    os.environ["PATH"] = os.path.join(OSGEO4W, "bin") + ";" + os.environ["PATH"]

    # GeoDjango paths
    GDAL_LIBRARY_PATH = os.path.join(OSGEO4W, "bin", "gdal310.dll")
    GEOS_LIBRARY_PATH = os.environ.get(
        "GEOS_LIBRARY_PATH", os.path.join(OSGEO4W, "bin", "geos_c.dll")
    )

else:
    # Linux/Unix configuration
    GDAL_LIBRARY_PATH = ctypes.util.find_library("gdal")
    GEOS_LIBRARY_PATH = ctypes.util.find_library("geos_c")

    if not GDAL_LIBRARY_PATH:
        raise OSError("Could not find GDAL library on Linux")
    if not GEOS_LIBRARY_PATH:
        raise OSError("Could not find GEOS library on Linux")

# Load GDAL dynamically to ensure it works
try:
    gdal_lib = CDLL(GDAL_LIBRARY_PATH)
    print("GDAL loaded successfully:", GDAL_LIBRARY_PATH)
except OSError as e:
    print("Error loading GDAL:", e)

# Optional: Set the variables explicitly for Django (if using settings)
os.environ["GDAL_LIBRARY_PATH"] = GDAL_LIBRARY_PATH
os.environ["GEOS_LIBRARY_PATH"] = GEOS_LIBRARY_PATH

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_USER_MODEL = "User.User"

# Add custom authentication backends
AUTHENTICATION_BACKENDS = [
    "apps.Authentication.backends.EmailOrPhoneBackend",  # Custom backend for email/phone authentication
    "django.contrib.auth.backends.ModelBackend",  # Default backend as fallback
]

# Table name settings to remove app name prefix
TABLE_NAME_TEMPLATE = "{table_name}"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        # "rest_framework.throttling.AnonRateThrottle",
        # "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/day", "user": "1000/day"},
    # Configure renderers so that responses are in camelCase.
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    # Configure parsers so that incoming camelCase keys are converted to snake_case.
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ),
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=120),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

# # CORS Settings
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
# ]


CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-refresh-token",
]

# settings.py
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("redis://127.0.0.1:6379/0")],  # Redis URL format
#         },
#     },
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("172.18.112.22", 6379)],
        },
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": True,
        },
        "airflow": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

# --- mailing system setting ----
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() == "true"

# --- SendGrid Email Configuration ----
# Use SendGrid Web API instead of SMTP for better reliability
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@wastewise.com")
SENDGRID_TRACK_CLICKS_PLAIN = False
SENDGRID_TRACK_CLICKS_HTML = False
SENDGRID_TRACK_OPENS = False

# Disable sandbox mode for production (emails will be delivered)
SENDGRID_SANDBOX_MODE_IN_DEBUG = False
SENDGRID_ECHO_TO_STDOUT = DEBUG  # Only echo to stdout in debug mode

# Print email configuration for debugging
print("=== SendGrid Email Configuration ===")
print(f"DEFAULT_FROM_EMAIL: {DEFAULT_FROM_EMAIL}")
print(
    f"SENDGRID_API_KEY: {'*' * len(SENDGRID_API_KEY) if SENDGRID_API_KEY else 'None'}"
)
print(f"EMAIL_BACKEND: {EMAIL_BACKEND}")
print("===================================")


APPEND_SLASH = True

# --- Stripe Configuration ---
# Stripe API Keys (get these from Stripe Dashboard)
STRIPE_PUBLISHABLE_KEY = os.getenv(
    "STRIPE_PUBLISHABLE_KEY",
)  # Test publishable key for development
STRIPE_SECRET_KEY = os.getenv(
    "STRIPE_SECRET_KEY",
)  # Test secret key for development

# Stripe Webhook Configuration
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")

print("Stripe WEBHOOK Key:", STRIPE_WEBHOOK_SECRET)
# Stripe Configuration
STRIPE_LIVE_MODE = False  # Set to True for production
STRIPE_CURRENCY = "gbp"  # Default currency
STRIPE_SUPPORTED_CURRENCIES = ["usd", "eur", "gbp", "ghs"]  # Supported currencies

# Payment Configuration
PAYMENT_SUCCESS_URL = os.getenv(
    "PAYMENT_SUCCESS_URL", "http://localhost:3000/payment/success"
)
PAYMENT_CANCEL_URL = os.getenv(
    "PAYMENT_CANCEL_URL", "http://localhost:3000/payment/cancel"
)

# Stripe Features Configuration
STRIPE_FEATURES = {
    "payment_intents": True,
    "payment_methods": True,
    "customers": True,
    "refunds": True,
    "webhooks": True,
    "subscriptions": False,  # Enable when subscription features are needed
}

# Logging configuration for Stripe
LOGGING["loggers"]["stripe"] = {
    "handlers": ["console"],
    "level": "INFO",
    "propagate": False,
}

LOGGING["loggers"]["apps.Payment"] = {
    "handlers": ["console"],
    "level": "INFO",
    "propagate": False,
}

MEDIA_URL = "/uploads/"
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")
