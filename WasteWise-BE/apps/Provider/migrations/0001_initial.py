# Generated by Django 5.2.4 on 2025-08-04 23:18

import apps.Provider.models
import django.contrib.gis.db.models.fields
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InsurancePolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('policy_type', models.CharField(choices=[('transit', 'Goods in Transit'), ('cmr', 'CMR Insurance'), ('liability', 'Public Liability')], max_length=20)),
                ('coverage_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('policy_number', models.CharField(max_length=100)),
                ('expiry_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Insurance Policy',
                'verbose_name_plural': 'Insurance Policies',
                'db_table': 'insurance_policy',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProviderDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('driving_license', 'Driving License'), ('cpc_card', 'CPC Qualification Card'), ('tacho_card', 'Tachograph Card'), ('adr_certificate', 'ADR Certificate (Dangerous Goods)'), ('medical_certificate', 'Medical Certificate'), ('dbs_check', 'DBS Check Certificate'), ('driver_training', 'Driver Training Certificate'), ('passport', 'Passport/ID Document'), ('right_to_work', 'Right to Work Documentation'), ('proof_of_address', 'Proof of Address'), ('vehicle_registration', 'Vehicle Registration (V5C)'), ('mot_certificate', 'MOT Certificate'), ('vehicle_insurance', 'Vehicle Insurance Certificate'), ('operators_license', "Operator's License (O-License)"), ('plating_certificate', 'Plating Certificate (HGV)'), ('vehicle_inspection', 'Vehicle Inspection Certificate'), ('annual_test', 'Annual Test Certificate'), ('public_liability', 'Public Liability Insurance'), ('employers_liability', "Employer's Liability Insurance"), ('goods_in_transit', 'Goods in Transit Insurance'), ('professional_indemnity', 'Professional Indemnity Insurance'), ('motor_trade_insurance', 'Motor Trade Insurance'), ('company_registration', 'Company Registration Certificate'), ('vat_registration', 'VAT Registration Certificate'), ('trading_license', 'Trading License'), ('waste_carrier_license', 'Waste Carrier License'), ('scrap_metal_license', 'Scrap Metal Dealer License'), ('waste_management_license', 'Waste Management License'), ('health_safety_policy', 'Health & Safety Policy'), ('risk_assessment', 'Risk Assessment Document'), ('coshh_assessment', 'COSHH Assessment'), ('environmental_policy', 'Environmental Policy'), ('quality_management', 'Quality Management Certificate'), ('gdpr_policy', 'GDPR Privacy Policy'), ('bank_statement', 'Bank Statement'), ('financial_standing', 'Financial Standing Evidence'), ('credit_reference', 'Credit Reference'), ('employment_contract', 'Employment Contract'), ('contractor_agreement', 'Contractor Agreement'), ('terms_conditions', 'Terms & Conditions'), ('iso_certificate', 'ISO Certification'), ('bifa_membership', 'BIFA Membership Certificate'), ('fta_membership', 'FTA Membership Certificate'), ('trade_association', 'Trade Association Membership'), ('aea_certificate', 'AEA Certificate (Customs)'), ('eori_number', 'EORI Number Certificate'), ('customs_registration', 'Customs Registration'), ('other', 'Other Document')], max_length=50)),
                ('document_front', models.ImageField(blank=True, null=True, upload_to=apps.Provider.models.get_upload_path)),
                ('document_back', models.ImageField(blank=True, null=True, upload_to=apps.Provider.models.get_upload_path)),
                ('has_two_sides', models.BooleanField(default=False)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('rejection_reason', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Provider Document',
                'verbose_name_plural': 'Provider Documents',
                'db_table': 'provider_document',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProviderPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_type', models.CharField(choices=[('payout', 'Payout'), ('refund', 'Refund'), ('fee', 'Fee')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Provider Payment',
                'verbose_name_plural': 'Provider Payments',
                'db_table': 'provider_payment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProviderReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField()),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Provider Review',
                'verbose_name_plural': 'Provider Reviews',
                'db_table': 'provider_review',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SavedJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Saved Job',
                'verbose_name_plural': 'Saved Jobs',
                'db_table': 'provider_saved_job',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceArea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('is_primary', models.BooleanField(default=False)),
                ('price_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=4)),
            ],
            options={
                'verbose_name': 'Service Area',
                'verbose_name_plural': 'Service Areas',
                'db_table': 'service_area',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_type', models.CharField(choices=[('limited', 'Limited Company'), ('sole_trader', 'Sole Trader'), ('partnership', 'Partnership')], max_length=20)),
                ('company_name', models.CharField(max_length=200)),
                ('company_reg_number', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator('^[A-Z0-9]+$', 'Alphanumeric characters only')])),
                ('vat_registered', models.BooleanField(default=False)),
                ('vat_number', models.CharField(blank=True, max_length=20)),
                ('business_description', models.TextField(blank=True, max_length=2000)),
                ('website', models.URLField(blank=True)),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True)),
                ('operating_areas', models.JSONField(blank=True, default=list)),
                ('contact_person_name', models.CharField(blank=True, max_length=100)),
                ('contact_person_position', models.CharField(blank=True, max_length=100)),
                ('contact_person_email', models.EmailField(blank=True, max_length=254)),
                ('contact_person_phone', models.CharField(blank=True, max_length=20)),
                ('bank_account_holder', models.CharField(blank=True, max_length=200)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('bank_account_number', models.CharField(blank=True, max_length=50)),
                ('bank_routing_number', models.CharField(blank=True, max_length=50)),
                ('service_image', models.ImageField(blank=True, null=True, upload_to='service_providers/services/%Y/%m/')),
                ('base_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Primary service location coordinates', null=True, srid=4326)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('accepts_instant_bookings', models.BooleanField(default=True)),
                ('service_radius_km', models.PositiveIntegerField(default=50, help_text='Maximum service radius from base location (km)')),
                ('minimum_job_value', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('verification_status', models.CharField(choices=[('unverified', 'Unverified'), ('pending', 'Pending Review'), ('verified', 'Verified'), ('premium', 'Premium Verified')], default='unverified', max_length=20)),
                ('last_verified', models.DateTimeField(blank=True, null=True)),
                ('rating', models.DecimalField(decimal_places=1, default=0.0, max_digits=3)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('vehicle_count', models.PositiveIntegerField(default=0)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Service Provider',
                'verbose_name_plural': 'Service Providers',
                'db_table': 'service_provider',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address_type', models.CharField(choices=[('home', 'Home Address'), ('business', 'Business Address'), ('non_uk', 'Non-UK Address'), ('registered', 'Registered Business Address'), ('operational', 'Operational Address'), ('billing', 'Billing Address'), ('correspondence', 'Correspondence Address')], default='home', max_length=20)),
                ('address_line_1', models.CharField(help_text='Street address, building number, etc.', max_length=255, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, help_text='Apartment, suite, unit, etc.', max_length=255, verbose_name='Address Line 2')),
                ('city', models.CharField(help_text='City or town', max_length=100, verbose_name='City')),
                ('postcode', models.CharField(help_text='Postal/ZIP code', max_length=20, verbose_name='Postcode')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='State/County/Province')),
                ('country', models.CharField(default='United Kingdom', help_text='Country', max_length=100, verbose_name='Country')),
                ('business_name', models.CharField(blank=True, help_text='Business name for this address', max_length=200, verbose_name='Business Name')),
                ('is_primary', models.BooleanField(default=False, help_text='Mark as primary address for this provider')),
                ('is_verified', models.BooleanField(default=False, help_text='Address has been verified')),
                ('is_active', models.BooleanField(default=True, help_text='Address is currently active')),
                ('verification_date', models.DateTimeField(blank=True, help_text='Date when address was verified', null=True)),
                ('verification_method', models.CharField(blank=True, choices=[('postcode_lookup', 'Postcode Lookup'), ('manual_verification', 'Manual Verification'), ('document_upload', 'Document Upload'), ('third_party', 'Third Party Verification')], help_text='Method used to verify this address', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this address')),
            ],
            options={
                'verbose_name': 'Service Provider Address',
                'verbose_name_plural': 'Service Provider Addresses',
                'db_table': 'service_provider_address',
                'ordering': ['-is_primary', 'address_type', 'city'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderThrough',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'service_provider_through',
            },
        ),
        migrations.CreateModel(
            name='WatchedJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_watching', models.DateTimeField(default=django.utils.timezone.now)),
                ('notify', models.BooleanField(default=True)),
                ('notification_preferences', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Watched Job',
                'verbose_name_plural': 'Watched Jobs',
                'db_table': 'provider_watched_job',
                'managed': True,
            },
        ),
    ]
